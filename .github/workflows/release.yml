## Required secrets:
# DEPLOY_HOST
# DEPLOY_USERNAME
# DEPLOY_KEY

name: Release and deploy to Azure VM via SSH

permissions:
  packages: write
  contents: write

on:
  release:
    types: [published]
  workflow_run:
    workflows: ["ci"]
    branches: [main,master]
    types:
      - completed
  # Manual trigger for rollback to specific release or redeploy latest
  workflow_dispatch:
    inputs:
      version:
        default: latest
        description: Tag you want to release.
        required: true

jobs:
  deploy_via_ssh:
    #needs: push_to_registry
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: Checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v4

      - name: Checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v4
        with:
          ref: refs/tags/${{ github.event.inputs.version }}

      - name: Setup env vars
        run: |
          echo "IMAGE_REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=latest" >> $GITHUB_ENV
          fi;
          
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;

      - name: Generate .env file before deployment
        run: |
          echo "VERSION=${{ env.TAG_NAME }}" >> .env
          echo "IMAGE=ghcr.io/${{ env.IMAGE_REPOSITORY_NAME }}" >> .env
          echo "VIRTUAL_HOST=${{ secrets.DEPLOY_HOST }}" >> .env
          echo "LETSENCRYPT_HOST=${{ secrets.DEPLOY_HOST }}" >> .env
          echo "DEFAULT_EMAIL=${{ secrets.DEFAULT_EMAIL }}" >> .env

      - name: Copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./src,./deploy/init.yml,./deploy/production.yml,./.env"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: Verify remote docker-compose config before deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          script: |
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./init.yml -f ./production.yml config
            networkName=proxy
            if [[ ! $(docker network ls | grep "${networkName}") ]]; then
              docker network create "${networkName}"
            fi

      - name: Run remote db migrations
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            #echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./init.yml -f ./production.yml pull --ignore-buildable
            docker compose -f ./init.yml -f ./production.yml up migrations

      - name: Run remote docker-compose up via ssh
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            #echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./init.yml -f ./production.yml up --remove-orphans --no-color -d
            sleep 1
            docker compose -f ./init.yml -f ./production.yml ps -a
            docker compose -f ./init.yml -f ./production.yml top
            docker compose -f ./init.yml -f ./production.yml stats --no-stream

      - name: Cleanup gh workspace
        run: |
          rm -f .env
